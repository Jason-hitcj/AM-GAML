import matplotlib.pyplot as plt
import os

def plot_and_save_metrics_separately(methods_metrics, save_dir='img'):
    """
    绘制并单独保存每个指标的对比图（适配每10epoch记录一次的数据格式）
    
    参数:
        methods_metrics (dict): 格式为 {
            '方法名称': {
                'acc': [11个值],      # 对应0,10,20,...,100epoch
                'precision': [11个值],
                ...
            }
        }
        save_dir (str): 图片保存目录
    """
    # 定义x轴刻度和位置（0-100，每10epoch一个点）
    epochs = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
    x_ticks = [0, 20, 40, 60, 80, 100]  # 要显示的刻度
    
    # 确保保存目录存在
    os.makedirs(save_dir, exist_ok=True)
    
    # 绘图样式配置
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']  # 蓝、橙、绿、红
    linestyles = ['-', '--', ':', '-.']
    markers = ['o', 's', '^', 'D']  # 圆形、方形、三角、菱形
    
    # 获取指标名称列表
    metrics_names = list(next(iter(methods_metrics.values())).keys())
    
    # 为每个指标创建单独的图
    for metric_name in metrics_names:
        plt.figure(figsize=(8, 5))
        
        # 绘制每种方法的曲线
        for i, (method, metrics) in enumerate(methods_metrics.items()):
            plt.plot(
                epochs, 
                metrics[metric_name], 
                label=method,
                color=colors[i],
                linestyle=linestyles[i],
                marker=markers[i],
                markersize=8,
                linewidth=2
            )
        
        # 设置图表标题和标签（调大字体）
        plt.title(f'{metric_name.upper()} Comparison', fontsize=20, pad=10)
        plt.xlabel('Epoch', fontsize=16)
        plt.ylabel(metric_name.upper(), fontsize=16)
        
        # 添加图例（调大字体）
        plt.legend(fontsize=16, framealpha=0.9, loc='lower right')
        
        # 设置x轴
        plt.xticks(x_ticks)
        
        # 设置刻度标签大小
        plt.tick_params(axis='both', which='major', labelsize=12)
        
        # 自动调整y轴范围（限制在0-1之间）
        all_values = []
        for metrics in methods_metrics.values():
            all_values.extend(metrics[metric_name])
        plt.ylim(max(0, min(all_values)-0.05), min(1.02, max(all_values)+0.05))
        
        # 保存图片
        filename = os.path.join(save_dir, f'{metric_name}_comparison1.png')
        plt.savefig(filename, dpi=600, bbox_inches='tight')
        print(f"已保存: {filename}")
        plt.close()


# 示例使用（完全适配你的数据格式）
if __name__ == "__main__":
    # 你的实际数据格式示例（11个点对应0,10,20,...,100epoch）
    methods_metrics = {
        'LSTM': {
            'acc':       [0.5690, 0.8870, 0.9163, 0.9180, 0.9356, 0.9305, 0.9439, 0.9439, 0.9389, 0.9498, 0.9464],
            'precision': [0.2845, 0.8840, 0.9144, 0.9216, 0.9350, 0.9278, 0.9414, 0.9414, 0.9480, 0.9480, 0.9438],
            'recall':    [0.5000, 0.8873, 0.9152, 0.9117, 0.9335, 0.9333, 0.9456, 0.9456, 0.9500, 0.9500, 0.9492],
            'f1':        [0.3627, 0.8854, 0.9148, 0.9155, 0.9342, 0.9297, 0.9431, 0.9431, 0.9489, 0.9489, 0.9458],
            'auprc':     [0.8788, 0.9307, 0.9376, 0.9516, 0.9676, 0.9620, 0.9632, 0.9650, 0.9695, 0.9695, 0.9711]
        },
        'SVM': {
            'acc':       [0.895315, 0.898975, 0.912884, 0.853587, 0.827965, 0.802343, 0.902635, 0.863104, 0.845534, 0.895315, 0.893119],
            'precision': [0.851330, 0.850309, 0.878400, 0.767030, 0.731518, 0.696822, 0.868379, 0.792208, 0.767932, 0.843798, 0.828909],
            'recall':    [0.918919, 0.930743, 0.927365, 0.951014, 0.952703, 0.962838, 0.913851, 0.927365, 0.922297, 0.930743, 0.949324],
            'f1':        [0.883834, 0.888710, 0.902219, 0.849170, 0.827586, 0.808511, 0.890535, 0.854475, 0.838066, 0.885141, 0.885039],
            'auprc':     [0.908104, 0.913820, 0.945915, 0.951534, 0.940040, 0.941365, 0.935606, 0.932016, 0.923557, 0.937046, 0.942071]
        },
        'XGBoost': {
            'acc':       [0.950952, 0.970717, 0.977306, 0.981698, 0.984627, 0.989019, 0.994143, 0.996340, 0.996340, 0.996340, 0.996340],
            'precision': [0.969589, 0.970990, 0.971429, 0.976471, 0.979832, 0.984874, 0.991582, 0.991625, 0.991625, 0.991625, 0.991625],
            'recall':    [0.915541, 0.961149, 0.976351, 0.981419, 0.984797, 0.989865, 0.994932, 1.000000, 1.000000, 1.000000, 1.000000],
            'f1':        [0.941790, 0.966044, 0.973884, 0.978939, 0.982308, 0.987363, 0.993255, 0.995795, 0.995795, 0.995795, 0.995795],
            'auprc':     [0.975033, 0.989731, 0.996158, 0.998464, 0.999160, 0.999499, 0.999725, 0.999849, 0.999932, 0.999964, 0.999987]
        }, 
        'AM-GAML': {
            'acc':       [0.5749, 0.9389, 0.9456, 0.9448, 0.9498, 0.9498, 0.9523, 0.9531, 0.9515, 0.9548, 0.9598],
            'precision': [0.6405, 0.9374, 0.9443, 0.9427, 0.9483, 0.9482, 0.9506, 0.9512, 0.9496, 0.9534, 0.9586],
            'recall':    [0.5176, 0.9389, 0.9455, 0.9464, 0.9501, 0.9503, 0.9531, 0.9545, 0.9526, 0.9552, 0.9601],
            'f1':        [0.4091, 0.9381, 0.9448, 0.9442, 0.9491, 0.9491, 0.9517, 0.9526, 0.9509, 0.9542, 0.9593],
            'auprc':     [0.5478, 0.9161, 0.9561, 0.9421, 0.9566, 0.9615, 0.9596, 0.9597, 0.9511, 0.9538, 0.9644]
        }
    }
    
    plot_and_save_metrics_separately(
        methods_metrics=methods_metrics,
        save_dir='img'
    )